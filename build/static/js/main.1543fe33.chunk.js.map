{"version":3,"sources":["PlayingCard/Hand/PlayingCard/CardImages/b.svg","PlayingCard/Hand/PlayingCard/CardImages sync /^/.//.*/.svg$","PlayingCard/Hand/PlayingCard/CardImages/10c.svg","PlayingCard/Hand/PlayingCard/CardImages/10d.svg","PlayingCard/Hand/PlayingCard/CardImages/10h.svg","PlayingCard/Hand/PlayingCard/CardImages/10s.svg","PlayingCard/Hand/PlayingCard/CardImages/1c.svg","PlayingCard/Hand/PlayingCard/CardImages/1d.svg","PlayingCard/Hand/PlayingCard/CardImages/1h.svg","PlayingCard/Hand/PlayingCard/CardImages/1s.svg","PlayingCard/Hand/PlayingCard/CardImages/1s2.svg","PlayingCard/Hand/PlayingCard/CardImages/2c.svg","PlayingCard/Hand/PlayingCard/CardImages/2d.svg","PlayingCard/Hand/PlayingCard/CardImages/2h.svg","PlayingCard/Hand/PlayingCard/CardImages/2s.svg","PlayingCard/Hand/PlayingCard/CardImages/3c.svg","PlayingCard/Hand/PlayingCard/CardImages/3d.svg","PlayingCard/Hand/PlayingCard/CardImages/3h.svg","PlayingCard/Hand/PlayingCard/CardImages/3s.svg","PlayingCard/Hand/PlayingCard/CardImages/4c.svg","PlayingCard/Hand/PlayingCard/CardImages/4d.svg","PlayingCard/Hand/PlayingCard/CardImages/4h.svg","PlayingCard/Hand/PlayingCard/CardImages/4s.svg","PlayingCard/Hand/PlayingCard/CardImages/5c.svg","PlayingCard/Hand/PlayingCard/CardImages/5d.svg","PlayingCard/Hand/PlayingCard/CardImages/5h.svg","PlayingCard/Hand/PlayingCard/CardImages/5s.svg","PlayingCard/Hand/PlayingCard/CardImages/6c.svg","PlayingCard/Hand/PlayingCard/CardImages/6d.svg","PlayingCard/Hand/PlayingCard/CardImages/6h.svg","PlayingCard/Hand/PlayingCard/CardImages/6s.svg","PlayingCard/Hand/PlayingCard/CardImages/7c.svg","PlayingCard/Hand/PlayingCard/CardImages/7d.svg","PlayingCard/Hand/PlayingCard/CardImages/7h.svg","PlayingCard/Hand/PlayingCard/CardImages/7s.svg","PlayingCard/Hand/PlayingCard/CardImages/8c.svg","PlayingCard/Hand/PlayingCard/CardImages/8d.svg","PlayingCard/Hand/PlayingCard/CardImages/8h.svg","PlayingCard/Hand/PlayingCard/CardImages/8s.svg","PlayingCard/Hand/PlayingCard/CardImages/9c.svg","PlayingCard/Hand/PlayingCard/CardImages/9d.svg","PlayingCard/Hand/PlayingCard/CardImages/9h.svg","PlayingCard/Hand/PlayingCard/CardImages/9s.svg","PlayingCard/Hand/PlayingCard/CardImages/jc.svg","PlayingCard/Hand/PlayingCard/CardImages/jd.svg","PlayingCard/Hand/PlayingCard/CardImages/jh.svg","PlayingCard/Hand/PlayingCard/CardImages/js.svg","PlayingCard/Hand/PlayingCard/CardImages/kc.svg","PlayingCard/Hand/PlayingCard/CardImages/kd.svg","PlayingCard/Hand/PlayingCard/CardImages/kh.svg","PlayingCard/Hand/PlayingCard/CardImages/ks.svg","PlayingCard/Hand/PlayingCard/CardImages/qc.svg","PlayingCard/Hand/PlayingCard/CardImages/qd.svg","PlayingCard/Hand/PlayingCard/CardImages/qh.svg","PlayingCard/Hand/PlayingCard/CardImages/qs.svg","PlayingCard/Hand/PlayingCard/PlayingCardsList.js","PlayingCard/Hand/PlayingCard/PlayingCard.js","CardExample.js","PlayingCard/Hand/Hand.js","HandExample.js","PlayingCard/Deck.js","PlayingCard/Board.js","PlayingCard/Solitaire.js","SolitaireExample.js","PlayingCard/GinRummy.js","GinRummyExample.js","PlayingCard/Poker.js","PokerExample.js","CheckCss.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./10c.svg","./10d.svg","./10h.svg","./10s.svg","./1c.svg","./1d.svg","./1h.svg","./1s.svg","./1s2.svg","./2c.svg","./2d.svg","./2h.svg","./2s.svg","./3c.svg","./3d.svg","./3h.svg","./3s.svg","./4c.svg","./4d.svg","./4h.svg","./4s.svg","./5c.svg","./5d.svg","./5h.svg","./5s.svg","./6c.svg","./6d.svg","./6h.svg","./6s.svg","./7c.svg","./7d.svg","./7h.svg","./7s.svg","./8c.svg","./8d.svg","./8h.svg","./8s.svg","./9c.svg","./9d.svg","./9h.svg","./9s.svg","./b.svg","./jc.svg","./jd.svg","./jh.svg","./js.svg","./kc.svg","./kd.svg","./kh.svg","./ks.svg","./qc.svg","./qd.svg","./qh.svg","./qs.svg","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","PlayingCardsList","suits","addSuits","i","_step","_iterator","_createForOfIteratorHelper","s","n","done","suit","value","require","err","f","PlayingCard_PlayingCardsList_i","PlayingCard_PlayingCardsList_faces","length","flipped","default","PlayingCard","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","card","height","flippable","elevated","style","position","x","y","draggableDivStyle","zIndex","transform","console","log","setState","percent","translateY","match","newTranslateY","Number","slice","replace","concat","onClick","preventDefault","indexOf","removeCard","onDragStart","onDrag","onDragStop","ReactDOM","refs","getBoundingClientRect","_this2","react_default","a","createElement","react_draggable_default","defineProperty","ref","className","src","alt","elevateOnClick","elevate","bind","Component","Hand","onHIt","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","hit","key","stop","onPass","_callee2","_context2","pass","assert","Array","isArray","cards","cardStyles","playerType","cardSize","layout","deadCards","handLength","over","initialOver","curl","Math","pow","deg","degs","initialDown","down","num","dead","isCardDead","cardToSpliceInto","indexToInsertInto","getBindingClientRect","splice","newIndexToSpliceInto","previousIndexToSpliceInto","xPositionOfKey","index","buttons","resetFanning","styleType","fanStyle","resetSpread","spreadStyle","resetStack","stackStyle","Hand_PlayingCard_PlayingCard","hide","Deck","initDeck","deck","Deck_createForOfIteratorHelper","push","_i","_faces","hidden","notHidden","dist","pop","decks","deal","1","shuffle","j","floor","random","_ref","Board","hands","cardWidth","width","hand","PlayingCard_Hand_Hand","handId","Solitaire","deck_0","deck_1","deck_2","deck_3","deck_4","deck_5","deck_6","discard","draw","Map","GinRummy","List","socket","io","process","handN","handS","on","newState","newStateFull","players","opponentState1","primaryHand","playerState","set","JSON","stringify","styles","twoHand","right","top","bottom","board","left","emit","toJS","src_PlayingCard_Board","Poker","handNE","handE","handSE","handSW","handW","handNW","opponentState0","opponentState2","opponentState3","opponentState4","opponentState5","opponentState6","eightHand","window","innerHeight","transform-origin","innerWidth","CheckCss","playerID","_x","apply","arguments","_ref2","_x2","calculate","_ref3","_callee3","playersID","card_string_val","val","currentDealerScore","currentPlayers","currentPlayer","_context3","split","parseInt","dealerScore","objectSpread","Score","addToNoTurnList","abrupt","_x3","_x4","_ref4","_callee4","curretNoTurnList","_context4","Set","toConsumableArray","noTurnList","add","_x5","shuffleCardList","_callee6","currentState","array","_context6","cardList","_ref6","_callee5","currentIndex","temporaryValue","randomIndex","_context5","_x6","addPlayer","_ref7","_callee7","newPlayer","chips","currentPlayersList","myuuid","_context7","playerList","uuidv4","gameOver","turn","Name","Chips","Cards","_x7","_x8","moveCard","_ref8","_callee8","target","curretDeck","currentDistributedCards","top_card","current_dealer_cards","playerCards","_context8","distributedCards","dealerCards","_x9","shouldDealerTakeCard","_ref9","_callee9","current_players","min_score","max_score","randInt","_context9","forEach","player","getRandomInt","sent","_x10","decideTurn","_callee10","_context10","has","size","decideWin","_callee11","winners","_context11","refreshGame","_callee12","Shuffle_PlayingCardsList","faces","_faces2","_context12","CheckCss_createForOfIteratorHelper","maxPlayerScore","_getCardSize","_step2","_iterator2","_i3","_faces3","playerLayout","dealerLayout","disabled","React","render","src_CheckCss_0","document","getElementById"],"mappings":"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","file":"static/js/main.1543fe33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/b.36829967.svg\";","var map = {\n\t\"./10c.svg\": 61,\n\t\"./10d.svg\": 62,\n\t\"./10h.svg\": 63,\n\t\"./10s.svg\": 64,\n\t\"./1c.svg\": 65,\n\t\"./1d.svg\": 66,\n\t\"./1h.svg\": 67,\n\t\"./1s.svg\": 68,\n\t\"./1s2.svg\": 69,\n\t\"./2c.svg\": 70,\n\t\"./2d.svg\": 71,\n\t\"./2h.svg\": 72,\n\t\"./2s.svg\": 73,\n\t\"./3c.svg\": 74,\n\t\"./3d.svg\": 75,\n\t\"./3h.svg\": 76,\n\t\"./3s.svg\": 77,\n\t\"./4c.svg\": 78,\n\t\"./4d.svg\": 79,\n\t\"./4h.svg\": 80,\n\t\"./4s.svg\": 81,\n\t\"./5c.svg\": 82,\n\t\"./5d.svg\": 83,\n\t\"./5h.svg\": 84,\n\t\"./5s.svg\": 85,\n\t\"./6c.svg\": 86,\n\t\"./6d.svg\": 87,\n\t\"./6h.svg\": 88,\n\t\"./6s.svg\": 89,\n\t\"./7c.svg\": 90,\n\t\"./7d.svg\": 91,\n\t\"./7h.svg\": 92,\n\t\"./7s.svg\": 93,\n\t\"./8c.svg\": 94,\n\t\"./8d.svg\": 95,\n\t\"./8h.svg\": 96,\n\t\"./8s.svg\": 97,\n\t\"./9c.svg\": 98,\n\t\"./9d.svg\": 99,\n\t\"./9h.svg\": 100,\n\t\"./9s.svg\": 101,\n\t\"./b.svg\": 24,\n\t\"./jc.svg\": 102,\n\t\"./jd.svg\": 103,\n\t\"./jh.svg\": 104,\n\t\"./js.svg\": 105,\n\t\"./kc.svg\": 106,\n\t\"./kd.svg\": 107,\n\t\"./kh.svg\": 108,\n\t\"./ks.svg\": 109,\n\t\"./qc.svg\": 110,\n\t\"./qd.svg\": 111,\n\t\"./qh.svg\": 112,\n\t\"./qs.svg\": 113\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 60;","module.exports = __webpack_public_path__ + \"static/media/10c.46d30fd4.svg\";","module.exports = __webpack_public_path__ + \"static/media/10d.7f2f14fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/10h.c22bc3db.svg\";","module.exports = __webpack_public_path__ + \"static/media/10s.241d8ed7.svg\";","module.exports = __webpack_public_path__ + \"static/media/1c.5522f7ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/1d.74a874d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/1h.ef7c50b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/1s.b39d7ba4.svg\";","module.exports = __webpack_public_path__ + \"static/media/1s2.49b14f5f.svg\";","module.exports = __webpack_public_path__ + \"static/media/2c.8dc0f91e.svg\";","module.exports = __webpack_public_path__ + \"static/media/2d.9b2b7d93.svg\";","module.exports = __webpack_public_path__ + \"static/media/2h.25a4bbad.svg\";","module.exports = __webpack_public_path__ + \"static/media/2s.c0ad7af1.svg\";","module.exports = __webpack_public_path__ + \"static/media/3c.ee94f47c.svg\";","module.exports = __webpack_public_path__ + \"static/media/3d.62d35b8b.svg\";","module.exports = __webpack_public_path__ + \"static/media/3h.6d8ff3cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/3s.203ae462.svg\";","module.exports = __webpack_public_path__ + \"static/media/4c.563d3b84.svg\";","module.exports = __webpack_public_path__ + \"static/media/4d.f8ffb533.svg\";","module.exports = __webpack_public_path__ + \"static/media/4h.8dfeaf44.svg\";","module.exports = __webpack_public_path__ + \"static/media/4s.c2b2773e.svg\";","module.exports = __webpack_public_path__ + \"static/media/5c.6d08c7ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/5d.c4aaf080.svg\";","module.exports = __webpack_public_path__ + \"static/media/5h.9ec9a068.svg\";","module.exports = __webpack_public_path__ + \"static/media/5s.c33993c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/6c.a50f5ff5.svg\";","module.exports = __webpack_public_path__ + \"static/media/6d.059d1dd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/6h.8f4927bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/6s.7a17f80a.svg\";","module.exports = __webpack_public_path__ + \"static/media/7c.e01096e8.svg\";","module.exports = __webpack_public_path__ + \"static/media/7d.9f5c264a.svg\";","module.exports = __webpack_public_path__ + \"static/media/7h.70e74661.svg\";","module.exports = __webpack_public_path__ + \"static/media/7s.ed1ebdb6.svg\";","module.exports = __webpack_public_path__ + \"static/media/8c.9d0a476c.svg\";","module.exports = __webpack_public_path__ + \"static/media/8d.1939b5d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/8h.c1f64ceb.svg\";","module.exports = __webpack_public_path__ + \"static/media/8s.8766a7e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/9c.17b4ae55.svg\";","module.exports = __webpack_public_path__ + \"static/media/9d.c7cf4433.svg\";","module.exports = __webpack_public_path__ + \"static/media/9h.20dd2315.svg\";","module.exports = __webpack_public_path__ + \"static/media/9s.4a95f37c.svg\";","module.exports = __webpack_public_path__ + \"static/media/jc.805671d1.svg\";","module.exports = __webpack_public_path__ + \"static/media/jd.a01339b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/jh.2a10f735.svg\";","module.exports = __webpack_public_path__ + \"static/media/js.9e20aecd.svg\";","module.exports = __webpack_public_path__ + \"static/media/kc.57675a2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/kd.f537ae10.svg\";","module.exports = __webpack_public_path__ + \"static/media/kh.2ea2a962.svg\";","module.exports = __webpack_public_path__ + \"static/media/ks.17a0a4d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/qc.c47281bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/qd.eaa1f925.svg\";","module.exports = __webpack_public_path__ + \"static/media/qh.37ac6fed.svg\";","module.exports = __webpack_public_path__ + \"static/media/qs.348b64ba.svg\";","let PlayingCardsList = {};\nlet suits = ['c', 'd', 'h', 's'];\nlet faces = ['j', 'q', 'k'];\n\nlet addSuits = (i, PlayingCardsList) => {\n\tfor(let suit of suits){\n\t\tPlayingCardsList[i + suit] = require('./CardImages/' + i + suit + '.svg');\n\t}\n}\n\nfor(let i = 1; i < 10; i++){\n\taddSuits(i, PlayingCardsList);\n}\n\nfor(let i of faces){\n\taddSuits(i, PlayingCardsList);\n}\nPlayingCardsList.flipped = require('./CardImages/b.svg').default;\nPlayingCardsList['flipped'] = require('./CardImages/b.svg');\n\nexport default PlayingCardsList;","import React, { Component} from 'react';\nimport './PlayingCard.css';\nimport PlayingCardsList from './PlayingCardsList';\nimport Draggable, {DraggableCore} from 'react-draggable';\nimport * as ReactDOM from \"react-dom\"; // Both at the same time\n\n\nclass PlayingCard extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      flipped : props.flipped || props.card === 'hide',\n      card : props.card,\n      height : props.height,\n      flippable : props.flippable,\n      elevated : props.elevated,\n      style : this.props.style,\n        position : {x : 0, y : 0},\n        draggableDivStyle : {\"zIndex\":this.props.zIndex},\n        transform : ''\n    }\n\n    console.log(\"****************************************************\"+PlayingCardsList['flipped'])\n\n  }\n  componentWillReceiveProps(props) {\n    this.setState({\n        flipped : props.flipped,\n        card : props.card,\n        height : props.height,\n        flippable : props.flippable,\n        elevated : props.elevated,\n        style : props.style,\n        position : {x : 0, y : 0}\n\n    })\n  }\n  elevate(percent){\n      console.log(this.state);\n    if(this.state.elevated) percent = -percent;\n    let style = this.state.style;\n    let translateY = style.transform.match(/translateY\\((.*?)\\)/); //pull out translateY\n    if(translateY){\n      let newTranslateY = Number(translateY[1].slice(0, -1)) - percent; //add 50%\n      style.transform = style.transform.replace(/translateY(.*)/, `translateY(${newTranslateY}%)`)\n    }else{\n      style.transform += `\\ntranslateY(${-percent}%)`\n    }\n    this.setState({style : style,\n                    elevated : !this.state.elevated})\n  }\n    onClick(){\n        this.props.onClick(this.props.card);\n        console.log('position: ', )\n    }\n    onDragStart(e) {\n        this.state.draggableDivStyle = {\"zIndex\":\"10\", \"position\" : \"fixed\"}\n\n        e.preventDefault(); //fixes desktop drag image issue\n\n        // if()\n        if(!this.state.flipped)\n        {\n          console.log('style: ', this.state.style);\n          if(this.state.style && this.state.style.transform) {\n              if(this.state.style.transform.indexOf('rotate') !== -1) {\n                  console.log('derotating');\n                  let transform = this.state.style.transform.slice(0, -1); //copy it\n                  // this.state.style.transform = transform.replace(/rotate(.*)/, 'rotate(0)');\n                  this.setState({style:{transform:transform.replace(/rotate(.*)/, 'rotate(0)')}})\n              }\n              console.log('************ transforming');\n              // let newStyle = {transform :  this.state.style.transform.replace(/rotate(.*)/, 'rotate(0)')};\n              this.props.removeCard(this.state.card, this.state.style);\n          }\n          this.props.onDragStart(this.state.card);\n          console.log('start');\n        }\n        \n    }\n    onDrag() {\n        this.props.onDrag(this.state.card);\n    }\n    onDragStop() {\n        //if within range of a hand that accepts cards, then drop there\n        //else return to current hand\n        // console.log('************** drag stop style: ', this.refs['1h'].state.x);\n\n        // setTimeout(function() {\n        //     this.state.draggableDivStyle = //{\"transitionDuration\": \"0.25s\",\n        //         {}\n        // }, 100)\n        // this.state.draggableDivStyle = {\"transitionDuration\": \"1s\"}\n        this.state.draggableDivStyle = {\"zIndex\":this.props.zIndex, \"position\" : \"fixed\"}\n\n        this.props.onDragStop(this.state.card);\n\n    }\n    getBindingClientRect() {\n        return ReactDOM.findDOMNode(this.refs[this.state.card]).getBoundingClientRect()\n    }\n  render() {\n\n      return (\n          <Draggable //onStart={this.onDragStart.bind(this)} //bind this from PlayingCard\n          //     onStop={this.onDragStop.bind(this)}\n          //            onDrag={this.onDrag.bind(this)}\n                     position={this.state.position} //resets back to initial position on drag end\n          >\n              <div style={this.state.draggableDivStyle}>\n                <img ref={this.state.card}\n                  style={this.state.style}\n                  height={this.state.height}\n                  className='Playing-card'\n                  src={this.state.flipped === true ? PlayingCardsList['flipped'] : PlayingCardsList[this.state.card]}\n                  alt={this.state.flipped === true ? 'Hidden Card' : PlayingCardsList[this.state.card]}\n                  onClick={this.props.elevateOnClick ? () => this.elevate(this.props.elevateOnClick) : null}\n                  onClick={this.onClick.bind(this)}\n                />\n              </div>\n          </Draggable>\n    );\n  }\n}\n/*this.state.flippable ? ()=> {\n            this.setState({flipped:this.state.flipped === true ? false : true,\n              height: this.state.height,\n              card: this.state.card});\n          } : null*/\n\nexport default PlayingCard;\n","import React, { Component } from 'react';\n//import {createStore } from 'redux';\nimport PlayingCardsList from \"./PlayingCard/Hand/PlayingCard/PlayingCardsList\";\nimport Dropdown from 'react-dropdown'\nimport PlayingCard from \"./PlayingCard/Hand/PlayingCard/PlayingCard\";\n\n\n\nclass CardExample extends Component {\n    constructor(){\n    super();\nthis.state = {card: \"1h\"}\n\n  }\n\n    _onSelect = (option) => {\n        console.log('You selected ', option);\n        this.setState({card: option.value}, function(){\n        });\n    };\n\n  render() {\n\n\n    return (\n        <div>\n        <div>\n          <PlayingCard\n              key={ \"example\" }\n              height={ 100 }\n              card={ this.state.card }\n              flipped={ false }\n              elevateOnClick={true}\n          /></div>\n          Select a Card:\n          <Dropdown\n              options={Object.keys(PlayingCardsList)}\n              onChange={this._onSelect}\n              value={this.state.card}\n              placeholder=\"Select an option\"\n          />\n        </div>\n    );\n  }\n}\n\nexport default CardExample;\n","import React, { Component} from 'react';\nimport './Hand.css';\nimport PlayingCard from './PlayingCard/PlayingCard';\nimport ReactDOM from 'react-dom';\nimport { Button } from 'bootstrap';\n\n\nclass Hand extends Component {\n    constructor(props) {\n            super(props);\n            console.assert(Array.isArray(this.props.cards), 'Hands must have cards, even as an empty array');\n            this.cardStyles = [];\n            console.log(\"Player Type : \",this.props.playerType)\n            this.state = {\n              cards : this.props.cards,\n              cardSize : this.props.cardSize,\n              elevated : this.props.elevated,\n              layout: this.props.layout,\n\n            };\n            this.deadCards = {};\n            this.handLength = this.props.cards.length;\n            //setup for fanning\n\n    }\n    componentWillReceiveProps(props) {\n        // console.log('got some props: ', props)\n\n        this.setState({\n            cards : props.cards,\n            cardSize : props.cardSize,\n            elevated : props.elevated,\n            layout: props.layout\n        })\n        this.handLength = props.cards.length;\n\n    }\n    elevateOne(card){\n\n    }\n    resetStack(){\n        this.over = 50;\n    }\n    resetSpread(){\n        this.initialOver = 110 * (this.handLength - 1);\n        this.over = this.initialOver / 2;\n\n    }\n    resetFanning(){\n        this.curl = Math.pow(this.handLength, 1.30) * 10; //curl of cards in hand\n        this.deg = this.props.cards.length > 1 ? -this.handLength * 15 : 0;\n        this.degs = this.deg / 2;\n        this.initialDown = this.handLength * 7;\n        this.down = this.initialDown / 2;\n        this.initialOver = this.curl;\n        this.over = this.initialOver / 2;\n    }\n\n    spreadStyle(num){        \n        if(num > 0){\n            this.over -= this.initialOver / (this.handLength - 1);\n        }\n        return {\n            'zIndex' : num,\n            'transform' : `translateX(${(-50 + this.over * -1)}%)`\n        }\n    }\n    \n    fanStyle(num) {\n        // console.log(\"handlenght\", this.handLength);\n        // console.log(\"num\", num)\n        let overHalf = num > (this.handLength - 1) / 2;\n        if (false && process.env.NODE_ENV !== \"production\") {\n            console.log('degs', this.degs);\n            console.log('over', this.over);\n            console.log('down', (this.overHalf ? -this.down : this.down));\n            console.log('num: ', num)\n        }\n        if (num > 0) {\n            this.degs -= this.deg / (this.handLength - 1);\n            this.down -= this.initialDown / (this.handLength - 1);\n            this.over -= this.initialOver / (this.handLength - 1);\n        }\n        return {\n            'zIndex' : num\n            // 'transform': `translateY(${(overHalf ? -this.down : this.down)}%) \n            // translateX(${(-50 + this.over * -1)}%) \n            // rotate(${this.degs}deg)`\n         }\n    }\n    stackStyle(num){\n        if(num > 0){\n            this.over -= 20 / this.handLength\n        }\n        return {\n            'zIndex' : num,\n            'transform' : `translateX(${(this.over * -1)}%)`\n        }\n    }\n    isCardDead(id) {\n        // console.log('card is dead: ', this.deadCards[id] ? this.deadCards[id].dead : false)\n        return this.deadCards[id] ? this.deadCards[id].dead : false;\n    }\n    removeCard(id, style) {\n        if(!this.isCardDead(id)) {\n            this.deadCards[id] = {\n                dead : true,\n                style : style //should it keep track of its own style?\n            };\n            // console.log(this.deadCards);\n            if(this.handLength) {\n                this.handLength--;\n            }\n            this.setState(this.state);\n            // let cards = this.state.cards;\n            // cards.splice(cards.indexOf(id), 1);\n            // this.setState({\n            //     cards : cards,\n            //     cardSize : this.state.cardSize,\n            //     elevated : this.state.elevated,\n            //     layout: this.state.layout\n            // })\n        }\n\n\n    }\n    onClick(key) {\n        //this.props.onClick({card: key, hand : this.props.handId});\n    }\n    onDragStop(key) {\n        // console.log(this);\n        // console.log('style: ', )\n        // console.log('reviving: ', key);\n\n        // this.refs[key].state.draggableDivStyle = {\"transitionDuration\": \"0.25s\"}\n        let cardToSpliceInto = this.state.cards[this.indexToInsertInto(key) + 1];\n        this.refs[key].state.position = {x : this.refs[key].getBindingClientRect().x, y : this.refs[key].getBindingClientRect().y}\n        console.log('card to splice into: ', cardToSpliceInto);\n        this.state.cards.splice(this.state.cards.indexOf(key), 1);\n        this.state.cards.splice(this.indexToInsertInto(key), 0, key);\n\n        if(this.deadCards[key]) {\n            this.deadCards[key].dead = false;\n            this.handLength++;\n            this.setState(this.state);\n        }\n\n    }\n    onDrag(key) {\n        console.log(\"draggin: \");\n        // add a dup card into the hand?\n        let newIndexToSpliceInto = this.state.cards[this.indexToInsertInto(key) + 1]\n        if(this.previousIndexToSpliceInto !== newIndexToSpliceInto) {\n            this.previousIndexToSpliceInto = newIndexToSpliceInto\n            this.state.cards.splice(this.previousIndexToSpliceInto, 1);\n            this.state.cards.splice(this.previousIndexToSpliceInto, 0, key);\n            this.setState(this.state);\n        }\n    }\n\n    onDragStart(key) {\n        // this.removeCard(key, this.refs[key].state.style);\n    }\n\n    indexToInsertInto(key) {\n        let indexToInsertInto = 0;\n        let xPositionOfKey = this.refs[key].getBindingClientRect().x;\n        for(let i = 0; i < this.state.cards.length; i++) {\n            if(this.state.cards[i] === key) {\n                continue;\n            }\n            // console.log('xCard ', this.state.cards[i], ' : ', this.refs[key].getBindingClientRect().x)\n            if(xPositionOfKey < this.refs[this.state.cards[i]].getBindingClientRect().x) {\n                return indexToInsertInto;\n            } else {\n                indexToInsertInto++;\n            }\n        }\n        return indexToInsertInto;\n    }\n    // getXPositionOfRef(ref, displacementX) {\n    //     if(!displacementX) {\n    //         displacementX = 0;\n    //     }\n    //     // console.log('ref in question ', ref)\n    //     // console.log('refs: ')\n    //     // console.log('full position: ', ReactDOM.findDOMNode(this.refs[ref]).getBoundingClientRect());\n    //     console.log('style: ',  this.refs[ref].state.style);\n    //     // let style = this.refs[ref].state.style;\n    //     // let transformString = style.transform;\n    //     // let transformXSearchString = 'transformX('\n    //     // let transformXIndex = transformString.indexOf(transformXSearchString) + transformXSearchString.length;\n    //     // function findEndBracket(start, string) {\n    //     //     for(var i = start; i < string.length; i++) {\n    //     //        if(string[i] == '%') {\n    //     //            return i;\n    //     //        }\n    //     //     }\n    //     // }\n    //     // let transformX = transformString.substring(transformXIndex + 1, findEndBracket(transformXIndex, transformString));\n    //     // console.log('***** transform: ', transformX);\n    //     // console.log('card ', ref, ': transform: ', transformX)\n    //     // if(false && transformX !== 'Infinity') {\n    //     //     console.log('in here');\n    //     //     //add the transform from draggable\n    //     //     return ReactDOM.findDOMNode(this.refs[ref]).getBoundingClientRect().x +\n    //     //         ReactDOM.findDOMNode(this.refs[ref]).getBoundingClientRect().width * transformX / 100 - displacementX;\n    //     // } else {\n    //         return ;\n    //     // }\n    // }\n\n    onHIt = async() =>{\n        await this.props.hit(this.props.key);\n    }\n    onPass = async() =>{\n        await this.props.pass(this.props.key);\n    }\n\n    render() {\n        let index = 0;\n        let buttons = \"\";\n// console.log('state: ', this.state);\n        if(this.state.layout === 'fan'){\n            console.log('reseting fanning');\n            this.resetFanning();\n            this.styleType = this.fanStyle;\n        }\n        else if(this.state.layout === 'spread'){\n            this.resetSpread();\n            this.styleType = this.spreadStyle;\n        }else if(this.state.layout === 'stack'){\n            this.resetStack();\n            this.styleType = this.stackStyle;\n        }\n        if(this.state.cards.length >= 2 && this.props.playerType !== \"dealer\")\n        {\n            console.log(this.props)\n            buttons = <div className=\"buttons\">\n            <button className=\"btn btn-success bts\">HIT</button>\n            <button className=\"btn btn-danger bts\">PASS</button>\n       </div>;\n        }\n\n        return (\n            <div className={'Hand'}\n            style={{ 'height': this.state.layout === 'stack' ? this.state.cardSize : this.state.cardSize * 2}} >\n            {\n                    this.state.cards.map((card) => {\n                    //   console.log('id: ', card);\n                    //   console.log('refs', this.refs);\n                    return (\n                            <div>\n                                <PlayingCard\n                                    removeCard={this.removeCard.bind(this)}\n                                    ref={card}\n                                    height={ this.state.cardSize }\n                                    card={ card }\n                                    key = { card }\n                                    style={this.isCardDead(card) ? this.deadCards[card].style : this.styleType(index++)} //just give it the current index, PlayingCard.js will fix that\n                                    flipped={ this.props.hide }\n                                    elevateOnClick={50}\n                                    onClick={this.onClick.bind(this)}\n                                    zIndex = {index}\n                                />\n                            </div>\n                    )\n                })\n            }\n            {/* <div className=\"buttons\">\n                 <button className=\"btn btn-success bts\">HIT</button>\n                 <button className=\"btn btn-danger bts\">PASS</button>\n            </div> */}\n            {buttons}\n          </div>\n        )\n    }\n}\nexport default Hand;","import React, { Component } from 'react';\nimport PlayingCardsList from \"./PlayingCard/Hand/PlayingCard/PlayingCardsList\";\nimport Dropdown from 'react-dropdown'\nimport Hand from \"./PlayingCard/Hand/Hand\";\n\n\n\nclass HandExample extends Component {\n    constructor(){\n    super();\nthis.state = {hand: [\"1d\", \"1c\", \"1s\", \"1h\"],\nlayout: \"stack\",\nhandSize: \"4\" }\n\n  }\n    randomHand = (size) => {\n        console.log('size: ', size)\n        var cardList = Object.keys(PlayingCardsList);\n        var hand = [];\n        var used = {};\n        for(var i = 0; i < size; i++) {\n            var card = Math.floor(Math.random()*Object.keys(PlayingCardsList).length);\n            console.log(\"card: \", card);\n            while(used[card]) {\n                card = Math.floor(Math.random()*Object.keys(PlayingCardsList).length);\n            }\n            used[card] =  true;\n            hand.push(cardList[card]);\n        }\n        console.log(\"hand: \", hand)\n        return hand;\n    };\n    _onSelectLayout = (option) => {\n        console.log('You selected ', option);\n        this.setState({layout: option.value}, function(){\n\n        });\n    };\n    _onSelectHandSize = (option) => {\n        console.log('You selected ', option);\n        var hand = this.randomHand(option.value);\n\n        this.setState({hand : hand, handSize : option}, function(){\n\n        });\n    };\n    _getCardSize() {\n        console.log(\"window: \", window.innerWidth);\n        console.log('handsize', this.state.hand.length)\n        console.log(\"size: \", window.innerWidth / this.state.hand.length)\n        let cardSize = window.innerWidth / this.state.hand.length;\n        return this.state.layout !== \"spread\" || cardSize > 100 ? 100 : cardSize;\n    }\n\n  render() {\n    const handStyle = {\n        margin: \"auto\",\n        width: \"10%\",\n        paddingBottom: \"5%\",\n        paddingTop: \"5%\",\n        left: \"45%\",\n        top: \"50%\"\n    };\n      return (\n          <div>\n              <div style={{\"width\": \"30%\", \"paddingLeft\":\"32%\"}}>\n                  Select a Layout:\n                  <Dropdown\n                      options={[\"fan\", \"stack\", \"spread\"]}\n                      onChange={this._onSelectLayout}\n                      value={this.state.layout}\n                      placeholder=\"Select an option\"\n                  />\n              </div>\n              <div style={{\"width\": \"30%\", \"paddingLeft\":\"32%\", \"paddingTop\":\"2%\"}}>\n                  Number of Cards:\n                  <Dropdown\n                      style={{\"left\": \"45%\"}}\n                      options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\n                      onChange={this._onSelectHandSize}\n                      value={this.state.handSize}\n                      placeholder=\"Select an option\"\n                  />\n              </div>\n              <div style={handStyle}>\n                  <Hand hide={false} layout={this.state.layout} cards={this.state.hand} cardSize={this._getCardSize()}/>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default HandExample;\n","export default class Deck {\n    constructor(){\n        this.cards = this.initDeck();\n    }\n    initDeck(){\n        let deck = [];\n        let suits = ['c', 'd', 'h', 's'];\n        let faces = ['j', 'q', 'k'];\n        \n        let addSuits = (i, deck) => {\n        \tfor(let suit of suits){\n        \t\tdeck.push(i + suit);\n        \t}\n        \treturn deck;\n        }\n        \n        for(let i = 1; i < 10; i++){\n        \tdeck = addSuits(i, deck);\n        }\n        \n        for(let i of faces){\n        \tdeck = addSuits(i, deck);\n        }\n        return deck;\n    }\n    deal(n, hidden, notHidden){\n        let dist = [];\n        if(n > this.cards.length){\n            console.log('not enough cards, dealing max');\n            n = this.cards.length;\n        }\n        console.log('n:', n)\n        while(n){\n            if(hidden){\n                dist.push(\"hide\");\n                this.cards.pop()\n                // hidden[n] ? dist.push('hide') : dist.push(this.cards.pop());\n            }else if(notHidden){\n                notHidden[n] ? dist.push(this.cards.pop()) : dist.push('hide');\n            }\n            else dist.push(this.cards.pop())\n\n            n--;\n        }\n        return dist;\n    }\n    solitaire(){\n        var decks = [];\n        for(var i = 8; i > 0; i--){\n            decks.push(this.deal(i, false, {1 : true}));\n        }\n        return decks;\n    }\n    shuffle(){\n        /**\n         * Shuffles array in place. ES6 version\n         * @param {Array} a items The array containing the items.\n         */\n        function shuffle(a) {\n            for (let i = a.length; i; i--) {\n                let j = Math.floor(Math.random() * i);\n                [a[i - 1], a[j]] = [a[j], a[i - 1]];\n            }\n            return a;\n        }\n        this.cards = shuffle(this.cards);\n    }\n}","import React, { Component} from 'react';\nimport './Board.css';\nimport Hand from './Hand/Hand';\n\n\n\n\nclass Board extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n        hands : props.hands,\n        cardSize : props.cardSize,\n        cardWidth:  225 / 314 * props.cardSize,\n        width: this.props.width ? this.props.width : 100,\n        style: this.props.style ? this.props.style : {'width': this.state.width + '%'}\n\n    }\n  }\n    onClick(key){\n        this.props.onClick(key);\n    }\n    componentWillReceiveProps(props) {\n        console.log('got board some props: ', props)\n\n        this.setState({\n            hands : props.hands,\n            cardSize : props.cardSize,\n            cardWidth:  225 / 314 * props.cardSize,\n            width: props.width ? props.width : 100,\n            style: props.style ? props.style : {'width': this.state.width + '%'}\n        })\n\n    }\n\n\n  render() {\n      console.log(\"hands: \", this.props.hands)\n\n      return (\n      <div className=\"Board\" style={this.state.style}>\n      {\n        this.state.hands.map((hand) => {\n          return (\n            <div className=\"BoardHandWrapper\">\n                <Hand handId={hand.handId} onClick={this.onClick.bind(this)} hide={hand.hide} layout={hand.layout} cards={hand.hand} cardSize={this.state.cardSize}/>\n            </div>\n          )\n      })\n    }\n      </div>\n    );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './Table/Table.css';\nimport Hand from './Hand/Hand'\nimport Deck from './Deck';\nimport Boards from './Boards';\n\nclass Solitaire extends Component {\n    constructor(props) {\n        super(props);\n        this.deck = new Deck();\n        this.deck.shuffle();\n        this.state = {\n            //handN : this.deck.deal(8),\n            //handE : this.deck.deal(7),\n            //handW : this.deck.deal(6),\n            // board : this.deck.solitaire(),\n            deck_0 : this.deck.deal(6, true),\n            deck_1 : this.deck.deal(5, true),\n            deck_2 : this.deck.deal(4, true),\n            deck_3 : this.deck.deal(3, true),\n            deck_4 : this.deck.deal(2, true),\n            deck_5 : this.deck.deal(1, true),\n            deck_6 : [],\n            discard : this.deck.deal(3)\n        }\n        this.state.deck_0 = this.state.deck_0.concat(this.deck.deal(1));\n        this.state.deck_1 = this.state.deck_1.concat(this.deck.deal(1));\n        this.state.deck_2 = this.state.deck_2.concat(this.deck.deal(1));\n        this.state.deck_3 = this.state.deck_3.concat(this.deck.deal(1));\n        this.state.deck_4 = this.state.deck_4.concat(this.deck.deal(1));\n        this.state.deck_5 = this.state.deck_5.concat(this.deck.deal(1));\n        this.state.deck_6 = this.state.deck_6.concat(this.deck.deal(1));\n        this.state.draw = this.deck.deal(100, true);\n\n\n\n\n    }\n\n    removeOne(hand) {\n        \n        this.state[hand].pop()\n        this.setState({[hand] : this.state[hand]});\n\n    }\n\n    //We need to do move card on click of a card\n        //1st raise card 75%\n\n    render() {\n\n        this.props.cardSize ? this.cardSize = this.props.cardSize : this.cardSize = 110;\n        return (\n        <div className={\"grid-container\"}>\n            <div className={\"deck_0\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_0} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"deck_1\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_1} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"deck_2\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_2} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"deck_3\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_3} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"deck_4\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_4} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"deck_5\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_5} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"deck_6\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.deck_6} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"hand_draw\"}>\n                    <Hand hide={false} layout={\"stack\"} cards={this.state.draw} cardSize={this.cardSize}/>\n            </div>\n            <div className={\"hand_discard\"}>\n                <Hand hide={false} layout={\"stack\"} cards={this.state.discard} cardSize={this.cardSize}/>\n            </div>\n        </div>\n        )\n    }\n}\n\n\n\n\nexport default Solitaire;\n","import React, { Component } from 'react';\n//import {createStore } from 'redux';\n\nimport './SolitaireExample.css';\nimport Solitaire from \"./PlayingCard/Solitaire\";\n\n/*\nThis video series is awesome:\nhttps://www.youtube.com/watch?v=nrg7zhgJd4w\n\nmake reducers for most actions?\nconst reducer = function(state, action) {\n  return state;\n}\nconst store = createStore(reducer, {\n  table: {\n    hand1: \n\n  }\n})\nmake a bunch of reducers.  then use combineReducers. then store.subscribe\n\n\ndon't use state any more with redux\n  use redux logger!\n  use axios for ajax! no more jquery!\n  thunk for single areguments dispatch\n  promises:return promises as payload ->does cool things like takes care of err, next, etc\n\n\n  create one store and export from store.js file\n  make big old reducer with lots of switch\n\n  going to wrap the app in <Provider store={store}></\n  \n  //I think this ^^^ gives access to store to all nested components\n  //Also this.props.dispatch(~~imported action goes here ~~)\n  do @connect(a,b) wich will wrap your component and take care of props\n  @connect((store)=>){\n    return {\n      user: store.user\n      tweets: store.tweets.tweets\n    }\n  }\n  then in compent : this.props.user\n\n*/\n\n/*can use middleware for error handlers:\n  const error = (store) => (next) => (action) => {\n    try{\n      next(action);\n    }catch(e){\n      console.log(e);\n    }\n  }\n\n\nTakeaway:\n  store is injected into components from @connect\n  actions are called using this.props.dispatch\n  this is allowed through <Provider>\n\n\n  maybe just use @connect on overarching components like hands that are not too deep not too shallow\n  pass down actions too to dumb components.\n\n*/\n\n\n\nclass SolitaireExample extends Component {\n  constructor(){\n    super();\n    this.state = {\n      flipped : 'false'\n    }\n\n  }\n\n  render() {\n\n\n    return (\n      //we want a store with hands, a board (with hands);\n        <div style={{'paddingLeft': '10%'}}>\n          <Solitaire cardSize={Math.min(window.innerHeight / 7, window.innerWidth / 7.5)} style={{'height':window.innerHeight+'px'}}/>\n        </div>\n    );\n  }\n}\n\nexport default SolitaireExample;\n","import React, { Component } from 'react';\nimport './Table/Table.css';\nimport Deck from './Deck';\nimport Hand from \"./Hand/Hand\";\nimport Board from \"./Board\";\nimport io from 'socket.io-client';\nconst { Map, List } = require('immutable')\n\n\nclass GinRummy extends Component {\n    constructor(props) {\n        super(props);\n        this.deck = new Deck();\n        this.socket = io(process.env.REACT_APP_SOCKET_SERVER);//openSocket('http://localhost:8000');\n        this.cardSize = props.cardSize;\n        this.state = {\n            handN : [], //this.deck.deal(10),\n            handS : [], //this.deck.deal(10),\n            discard : Map({\n                handId : \"discard\",\n                hide : false,\n                hand: [], //this.deck.deal(1)\n                layout : \"stack\"\n            }),\n            draw : Map({\n                handId : \"draw\",\n                hide : true,\n                hand : [], //this.deck.deal(999)\n                layout : \"stack\"\n            })\n        };\n\n        this.socket.on('state', newState => {\n            // var discard = {...this.state.discard};\n            // var draw = {...this.state.draw};\n            // discard.hand = newState.discard;\n            // draw.hand = newState.draw;\n            // console.log(\"discard: \", discard.hand);\n            // console.log(\"draw: \", draw.hand);\n            // this.state.discard.hand.push(newState.discard[0]); //have to do this stupid stuff, should just use immutable\n            // this.state.draw.hand.push(newState.draw[0]);\n            // console.log('got players: ', newState.players);\n            // console.log('got state: ', newState);\n\n            const newStateFull = {\n                handN : newState.players.opponentState1 && newState.players.opponentState1.primaryHand || [], //change this to an array of opponents\n                handS : newState.players.playerState.primaryHand || [],\n                discard : this.state.discard.set(\"hand\", newState.discard),\n                draw : this.state.draw.set(\"hand\", newState.draw)\n            };\n            console.log(\"newState: \", JSON.stringify(newStateFull));\n            this.setState(newStateFull);\n        });\n        // this.cardSize = props.cardSize\n        // this.deck = new Deck();\n        // this.deck.shuffle();\n\n        this.styles = {\n            twoHand: function () {\n                return {\n                    handN: {'transform' : 'translateY(-30%) rotate(180deg)', 'right': '50%', 'top': \"0\", 'position': 'absolute'},\n                    handS: {'bottom': '0', 'right': '50%', 'position': 'absolute', 'height' : '30%'},\n                    board: {'left': 'calc(50% - ' + props.cardSize * 1.4 + 'px)', 'top': '35%', 'position': 'absolute', 'width': props.cardSize * 4 + 'px'}\n                }\n            }\n        };\n\n            \n    }\n\n    removeOne(hand) {\n        \n        // this.state[hand].pop()\n        // this.setState({[hand] : this.state[hand]});\n\n    }\n    cb(err, state) {\n        console.log(\"got a state: \",state);\n        // this.setState(state);\n    }\n    onClick(key) {\n        console.log(key);\n        if (key.hand === 'handS') {\n            console.log(\"discarding: \", key.card);\n             //don't change state\n            this.socket.emit('discard', key.card);\n        }\n        // if (key.hand === 'discard') {\n        //     console.log(this.state.discard);\n        //     let index = this.state.discard.hand.indexOf(key.card);\n        //     this.setState({\n        //         handS: this.state.get('handS').push(key.card) && this.state.handS,\n        //         discard : {\n        //             hand : this.state.discard.hand.splice(index, 1) && this.state.discard.hand,\n        //             handId : \"discard\",\n        //             hide : false\n        //\n        //         }\n        //     }, function(){\n        //         console.log(this.state.handS);\n        //     })\n        // }\n        if (key.hand === 'draw') {\n            console.log(\"drawing\");\n            this.socket.emit('draw');\n        }\n\n        if (key.hand === 'discard') {\n            console.log(\"drawing from discard\");\n            this.socket.emit('drawFromDiscard');\n        }\n        //     }, function(){\n        //         console.log(this.state.handS);\n        //     })\n        // }\n    };\n    componentDidUpdate(){\n    }\n    //We need to do move card on click of a card\n        //1st raise card 75%\n\n    render() {\n        console.log(\"draw: \", this.state.draw.toJS())\n        return (\n            <div className='Card-table' style={this.props.style}>\n                <div id='top' style={this.styles.twoHand(this.cardSize).handN}>\n                    <Hand onClick={this.onClick.bind(this)} handId={'handN'} layout={\"fan\"} hide={true}\n                          cards={this.state.handN} cardSize={this.cardSize}/>\n                </div>\n                <Board onClick={this.onClick.bind(this)} width={75} cardSize={this.cardSize * 1.7}\n                       style={this.styles.twoHand(this.cardSize).board} hands={[this.state.draw.toJS(), this.state.discard.toJS()]}/>\n                <div id='bottom' style={this.styles.twoHand(this.cardSize).handS}>\n                    <Hand                           key={ this.id }\n                                                    onClick={this.onClick.bind(this)} handId={'handS'} hide={false} layout={\"fan\"}\n                                                    cards={this.state.handS} cardSize={this.cardSize * 1.7}/>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default GinRummy;\n","import React, { Component } from 'react';\n//import {createStore } from 'redux';\n\nimport './SolitaireExample.css';\nimport GinRummy from \"./PlayingCard/GinRummy\";\nimport Board from \"./PlayingCard/Board\";\nimport Hand from \"./PlayingCard/Hand/Hand\";\n\n/*\nThis video series is awesome:\nhttps://www.youtube.com/watch?v=nrg7zhgJd4w\n\nmake reducers for most actions?\nconst reducer = function(state, action) {\n  return state;\n}\nconst store = createStore(reducer, {\n  table: {\n    hand1: \n\n  }\n})\nmake a bunch of reducers.  then use combineReducers. then store.subscribe\n\n\ndon't use state any more with redux\n  use redux logger!\n  use axios for ajax! no more jquery!\n  thunk for single areguments dispatch\n  promises:return promises as payload ->does cool things like takes care of err, next, etc\n\n\n  create one store and export from store.js file\n  make big old reducer with lots of switch\n\n  going to wrap the app in <Provider store={store}></\n  \n  //I think this ^^^ gives access to store to all nested components\n  //Also this.props.dispatch(~~imported action goes here ~~)\n  do @connect(a,b) wich will wrap your component and take care of props\n  @connect((store)=>){\n    return {\n      user: store.user\n      tweets: store.tweets.tweets\n    }\n  }\n  then in compent : this.props.user\n\n*/\n\n/*can use middleware for error handlers:\n  const error = (store) => (next) => (action) => {\n    try{\n      next(action);\n    }catch(e){\n      console.log(e);\n    }\n  }\n\n\nTakeaway:\n  store is injected into components from @connect\n  actions are called using this.props.dispatch\n  this is allowed through <Provider>\n\n\n  maybe just use @connect on overarching components like hands that are not too deep not too shallow\n  pass down actions too to dumb components.\n\n*/\n\n\n\nclass GinRummyExample extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      flipped : 'false'\n    }\n\n  }\n\n  render() {\n\n\n      return (\n        <GinRummy cardSize={Math.min(window.innerHeight / 5.5, window.innerWidth / 5.5, 80)} style={{'height':window.innerHeight+'px'}}/>\n      )\n  }\n}\n\nexport default GinRummyExample;\n","import React, { Component } from 'react';\nimport './Table/Table.css';\nimport Deck from './Deck';\nimport Hand from \"./Hand/Hand\";\nimport Board from \"./Board\";\nimport io from 'socket.io-client';\nconst { Map, List } = require('immutable')\n\n\nclass Poker extends Component {\n    constructor(props) {\n        super(props);\n        this.deck = new Deck();\n        this.deck.shuffle();\n        this.socket = io(process.env.REACT_APP_SOCKET_SERVER);//openSocket('http://localhost:8000');\n        this.cardSize = props.cardSize;\n        this.state = {\n            handN : this.deck.deal(2), //this.deck.deal(10),\n            handNE : this.deck.deal(2),\n            handE : this.deck.deal(2),\n            handSE : this.deck.deal(2),\n            handS : this.deck.deal(2), //this.deck.deal(10),\n            handSW : this.deck.deal(2),\n            handW : this.deck.deal(2),\n            handNW : this.deck.deal(2),\n            discard : Map({\n                handId : \"discard\",\n                hide : false,\n                hand: this.deck.deal(5),//this.deck.deal(1)\n                layout : \"spread\"\n            }),\n            draw : Map({\n                handId : \"draw\",\n                hide : true,\n                hand : this.deck.deal(999), //this.deck.deal(999)\n                layout : \"stack\"\n            })\n        };\n\n        this.socket.on('state', newState => {\n            // var discard = {...this.state.discard};\n            // var draw = {...this.state.draw};\n            // discard.hand = newState.discard;\n            // draw.hand = newState.draw;\n            // console.log(\"discard: \", discard.hand);\n            // console.log(\"draw: \", draw.hand);\n            // this.state.discard.hand.push(newState.discard[0]); //have to do this stupid stuff, should just use immutable\n            // this.state.draw.hand.push(newState.draw[0]);\n            // console.log('got players: ', newState.players);\n            // console.log('got state: ', newState);\n\n            const newStateFull = {\n                handN : newState.players.opponentState0 && newState.players.opponentState0.primaryHand || [], //change this to an array of opponents\n                handNW : newState.players.opponentState1 && newState.players.opponentState1.primaryHand || [], //change this to an array of opponents\n                handNE : newState.players.opponentState2 && newState.players.opponentState2.primaryHand || [],\n                handE : newState.players.opponentState3 && newState.players.opponentState3.primaryHand || [],\n                handSE : newState.players.opponentState4 && newState.players.opponentState4.primaryHand || [],\n                handSW : newState.players.opponentState5 && newState.players.opponentState5.primaryHand || [],\n                handW : newState.players.opponentState6 && newState.players.opponentState6.primaryHand || [],\n                handS : newState.players.playerState.primaryHand || [],\n                discard : this.state.discard.set(\"hand\", newState.discard),\n                draw : this.state.draw.set(\"hand\", newState.draw)\n            };\n            console.log(\"newState: \", JSON.stringify(newStateFull));\n            this.setState(newStateFull);\n        });\n        // this.cardSize = props.cardSize\n        // this.deck = new Deck();\n        // this.deck.shuffle();\n\n        this.styles = {\n            eightHand: function () {\n                return {\n                    handN: {'transform' : 'translateY(-30%) rotate(180deg)', 'right': '50%', 'top': \"0\", 'position': 'absolute'},\n                    handS: {'bottom': '0', 'right': '50%', 'position': 'absolute', 'height' : '30%'},\n                    handNE : {'bottom': '0', 'right': '50%', 'position': 'absolute', 'transform': 'rotate(45deg) translate(' + props.cardSize +'px -' + window.innerHeight() + ')', 'transform-origin' : ' 0px -' + window.innerWidth / 2 + 'px'},\n                    board: {'left': 'calc(50% - ' + props.cardSize * 1.4 + 'px)', 'top': '35%', 'position': 'absolute', 'width': props.cardSize * 4 + 'px'}\n                }\n            }\n        };\n\n            \n    }\n\n    removeOne(hand) {\n        \n        // this.state[hand].pop()\n        // this.setState({[hand] : this.state[hand]});\n\n    }\n    cb(err, state) {\n        console.log(\"got a state: \",state);\n        // this.setState(state);\n    }\n    onClick(key) {\n        console.log(key);\n        if (key.hand === 'handS') {\n            console.log(\"discarding: \", key.card);\n             //don't change state\n            this.socket.emit('discard', key.card);\n        }\n        // if (key.hand === 'discard') {\n        //     console.log(this.state.discard);\n        //     let index = this.state.discard.hand.indexOf(key.card);\n        //     this.setState({\n        //         handS: this.state.get('handS').push(key.card) && this.state.handS,\n        //         discard : {\n        //             hand : this.state.discard.hand.splice(index, 1) && this.state.discard.hand,\n        //             handId : \"discard\",\n        //             hide : false\n        //\n        //         }\n        //     }, function(){\n        //         console.log(this.state.handS);\n        //     })\n        // }\n        if (key.hand === 'draw') {\n            console.log(\"drawing\");\n            this.socket.emit('draw');\n        }\n\n        if (key.hand === 'discard') {\n            console.log(\"drawing from discard\");\n            this.socket.emit('drawFromDiscard');\n        }\n        //     }, function(){\n        //         console.log(this.state.handS);\n        //     })\n        // }\n    };\n    componentDidUpdate(){\n    }\n    //We need to do move card on click of a card\n        //1st raise card 75%\n\n    render() {\n        console.log(\"draw: \", this.state.draw.toJS())\n        return (\n            <div className='Card-table' style={this.props.style}>\n                <div id='top' style={this.styles.eightHand(this.cardSize).handN}>\n                    <Hand onClick={this.onClick.bind(this)} handId={'handN'} layout={\"fan\"} hide={true}\n                          cards={this.state.handN} cardSize={this.cardSize}/>\n                </div>\n                <Board onClick={this.onClick.bind(this)} width={75} cardSize={this.cardSize}\n                       style={this.styles.eightHand(this.cardSize).board} hands={[this.state.draw.toJS(), this.state.discard.toJS()]}/>\n                <div id='bottom' style={this.styles.eightHand(this.cardSize).handS}>\n                    <Hand                           key={ this.id }\n                                                    onClick={this.onClick.bind(this)} handId={'handS'} hide={false} layout={\"fan\"}\n                                                    cards={this.state.handS} cardSize={this.cardSize * 1.7}/>\n\n                </div>\n                <div id='idk' style={this.styles.eightHand(this.cardSize).handNE}>\n                    <Hand                           key={ this.id }\n                                                    onClick={this.onClick.bind(this)} handId={'handNE'} hide={false} layout={\"fan\"}\n                                                    cards={this.state.handNE} cardSize={this.cardSize}/>\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default Poker;\n","import React, { Component } from 'react';\n//import {createStore } from 'redux';\n\nimport './SolitaireExample.css';\nimport GinRummy from \"./PlayingCard/GinRummy\";\nimport Board from \"./PlayingCard/Board\";\nimport Hand from \"./PlayingCard/Hand/Hand\";\nimport Poker from \"./PlayingCard/Poker\";\n\n/*\nThis video series is awesome:\nhttps://www.youtube.com/watch?v=nrg7zhgJd4w\n\nmake reducers for most actions?\nconst reducer = function(state, action) {\n  return state;\n}\nconst store = createStore(reducer, {\n  table: {\n    hand1: \n\n  }\n})\nmake a bunch of reducers.  then use combineReducers. then store.subscribe\n\n\ndon't use state any more with redux\n  use redux logger!\n  use axios for ajax! no more jquery!\n  thunk for single areguments dispatch\n  promises:return promises as payload ->does cool things like takes care of err, next, etc\n\n\n  create one store and export from store.js file\n  make big old reducer with lots of switch\n\n  going to wrap the app in <Provider store={store}></\n  \n  //I think this ^^^ gives access to store to all nested components\n  //Also this.props.dispatch(~~imported action goes here ~~)\n  do @connect(a,b) wich will wrap your component and take care of props\n  @connect((store)=>){\n    return {\n      user: store.user\n      tweets: store.tweets.tweets\n    }\n  }\n  then in compent : this.props.user\n\n*/\n\n/*can use middleware for error handlers:\n  const error = (store) => (next) => (action) => {\n    try{\n      next(action);\n    }catch(e){\n      console.log(e);\n    }\n  }\n\n\nTakeaway:\n  store is injected into components from @connect\n  actions are called using this.props.dispatch\n  this is allowed through <Provider>\n\n\n  maybe just use @connect on overarching components like hands that are not too deep not too shallow\n  pass down actions too to dumb components.\n\n*/\n\n\n\nclass PokerExample extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      flipped : 'false'\n    }\n\n  }\n\n  render() {\n\n\n      return (\n        <Poker cardSize={Math.min(window.innerHeight / 5.5, window.innerWidth / 5.5, 80)} style={{'height':window.innerHeight+'px'}}/>\n      )\n  }\n}\n\nexport default PokerExample;\n","import React from \"react\";\n// import { BrowserRouter as Router, Route, Link, DefaultRoute} from \"react-router-dom\";\n// import PlayingCardsList from './PlayingCard/Hand/PlayingCard/PlayingCardsList';\nimport './CheckCss.css';\nimport Hand from \"./PlayingCard/Hand/Hand\";\nimport {v4 as uuidv4} from 'uuid';\n\n\nclass CheckCss extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let Shuffle_PlayingCardsList = [];\n        \n        // neeed to add to state\n        let players = {}\n        let playerList = []\n        let playerLayout = 'spread'        \n        let distributed_Cards = []\n        let dealerLayout = \"spread\"\n        // let cardStatus = {}\n        let suits = ['c', 'd', 'h', 's'];\n        let faces = ['j', 'q', 'k'];\n\n        let addSuits = (i, Shuffle_PlayingCardsList) => {\n            for(let suit of suits){\n                Shuffle_PlayingCardsList.push(i + suit)\n                // cardStatus[i + suit] = \"n_d\"\n            }\n        }\n        \n        for(let i = 1; i < 10; i++){\n            addSuits(i, Shuffle_PlayingCardsList);\n        }\n        \n        for(let i of faces){\n            addSuits(i, Shuffle_PlayingCardsList);\n        }\n\n        this.state = {  cardList : Shuffle_PlayingCardsList, \n                        // cardStatus:cardStatus, \n                        distributedCards: [...distributed_Cards],\n                        layout: 'stack',\n                        players:players,\n                        playerList:playerList,\n                        playerLayout:playerLayout,\n                        dealerLayout: dealerLayout,\n                        turn : -2,\n                        dealerCards : [],\n                        noTurnList : new Set([]),\n                        dealerScore : 0,\n                        gameOver : true,\n                        maxPlayerScore : 0,\n                        hit: \"\",\n                        pass:\"\"\n                    };\n    }\n\n    hit = async (playerID) =>{\n        await this.setState({hit:playerID})\n    }\n    \n    pass = async (playerID) =>{\n        await this.setState({pass:playerID})\n    }\n\n    calculate = async(playersID,card) =>{\n\n        console.log(\"Adding adding\",card,playersID)\n\n        // Card Val Calculation\n        let card_string_val = card.split(\"\")[0];\n        let val = 0\n\n        if (card_string_val >= '0' && card_string_val <= '9') {\n            val = parseInt(card_string_val);\n        } else {\n            val = 10;\n        }\n\n        // Dealer Calculate\n        if(playersID == \"dealer\")\n        {\n            let card_string_val = card.split(\"\")[0];\n            let currentDealerScore = this.state.dealerScore;\n\n            currentDealerScore += val;\n\n            await this.setState({dealerScore:currentDealerScore})\n\n            console.log(\"Dealer Score Updated : \",currentDealerScore)\n\n            // if(currentDealerScore >= 21)\n            // {\n            //     await this.setState({gameOver:true});\n            //     console.log(\"Game Over\");\n            // }\n        }\n\n        //player calculate\n        else{\n            let currentPlayers = {...this.state.players};\n            let currentPlayer = currentPlayers[playersID];\n    \n            currentPlayer.Score += val;        \n            console.log(\"Players Score Now : \",currentPlayer.Score)\n            currentPlayers[playersID] = currentPlayer;\n    \n            await this.setState({players:currentPlayers});\n    \n            if(currentPlayer.Score >= 21)\n            {\n                console.log(\"Player Scored Exceeded\");\n                await this.addToNoTurnList(playersID);\n            }\n        }\n\n        return;\n    }\n\n    addToNoTurnList = async(playersID) =>{\n        let curretNoTurnList  = new Set([...this.state.noTurnList]);\n        curretNoTurnList.add(playersID);\n        await this.setState({noTurnList:curretNoTurnList});\n        console.log(\"This Player is now out of any new turns\",playersID);\n    }\n\n    shuffleCardList = async() => {\n        var currentState = {...this.state}\n        \n        var array = [...currentState.cardList]\n\n        console.log(\"Shuffle Started\")\n\n        // While there remain elements to shuffle...\n        let shuffle = async(array) => {\n            \n            var currentIndex = array.length, temporaryValue, randomIndex;\n\n            while (0 !== currentIndex) {\n                // Pick a remaining element...\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n            \n                // And swap it with the current element.\n                temporaryValue = array[currentIndex];\n                array[currentIndex] = array[randomIndex];\n                array[randomIndex] = temporaryValue;\n            }\n\n            await this.setState({cardList:array});\n            \n            return;\n        }\n\n        await shuffle(array);\n\n        console.log(\"Shuffle Stopped\")\n\n        return;\n    }\n\n    addPlayer = async (newPlayer,chips) =>{\n        if(newPlayer == null)\n        {\n            return;\n        }\n\n        let currentPlayers = {...this.state.players}\n        let currentPlayersList = [...this.state.playerList]\n\n        let myuuid = uuidv4();\n\n        if(currentPlayersList.length ===  0)\n        {\n            //when the first player is added the game starts\n            this.setState({gameOver:false});\n\n            await this.setState({turn:0})\n        }\n        \n        //adding new player to the list\n        currentPlayers[myuuid] = {Name:newPlayer, Chips:chips, Cards:[], Score:0}\n        currentPlayersList.push(myuuid)\n\n        await this.setState({players: currentPlayers, playerList: currentPlayersList})\n\n        console.log(\"Player Added\",this.state.players)\n\n        return;\n    }\n\n    moveCard = async (target) => {\n        \n        //taking all the state varaibles\n        let curretDeck = [...this.state.cardList]\n        let currentDistributedCards = [...this.state.distributedCards]       \n        let top_card = curretDeck.pop()\n        \n        if(target === -1)\n        {\n            let current_dealer_cards = [...this.state.dealerCards];\n            current_dealer_cards.push(top_card)\n\n            //pushing card to dealer\n            await this.setState({dealerCards:current_dealer_cards})\n\n            console.log(\"dealer got new cards\",this.state.dealerCards)\n\n            // setting Distributed cards list\n            currentDistributedCards.push(top_card);\n\n            // finally updating cardList and distributed cards list\n            await this.setState({cardList:curretDeck,distributedCards:currentDistributedCards})\n            \n            await this.calculate(\"dealer\",top_card);\n\n            return;\n        }\n        else\n        {\n             //assignnew values to them\n            let currentPlayers = {...this.state.players}\n            let playerCards = [...currentPlayers[target].Cards]\n            \n            // pushing card to player\n            playerCards.push(top_card);\n            currentPlayers[target].Cards = playerCards;\n            currentDistributedCards.push(top_card);\n\n            //setStatus\n            await this.setState({cardList:curretDeck,players:currentPlayers,distributedCards:currentDistributedCards});\n\n            console.log(\"Going to Calculate\");\n\n            await this.calculate(target,top_card);\n\n            return;\n        }\n       \n    }\n\n    shouldDealerTakeCard = async(dealerScore) =>{\n        let current_players = [...this.state.playerList];\n        let min_score = 999999999;\n        let max_score  = 0;\n\n        // here I am comparing dealer scrore to the current players score and follow these rules\n        // 1. if min player score less than 21 is greater than Current dealer score then surely go for the dealers chance\n        // 2. if min player score is 21, then continue to deal cards \n        // 3. if max player score and agent's score is greater than min_player score, in that case we can pick a random number between 1-10 and then if the number is less than or equal to max_score-agent then we will deal the card.\n        // 4. if max_player score is less than or equal to dealer score then game is over, with dealer win or push\n        // 5. if min score == max_score then deal card if dealer score is less than that\n        current_players.forEach(player =>{\n            if(this.state.players[player].Score < min_score)\n            {\n                min_score = this.state.players[player].Score;\n            }\n            if(this.state.players[player].Score > max_score)\n            {\n                max_score = this.state.players[player].Score;\n            }\n        })\n\n        console.log(\"Current Min and Max are\", min_score, max_score);\n\n        // 5th point\n        if(min_score === max_score)\n        {\n            console.log(\"minscore === max score\")\n            if(min_score>dealerScore)\n            {\n                console.log(\"min_score is greater than dealer score\")\n                if(min_score>=21)\n                {\n                    console.log(\"min_score is greater than or equal to 21 then stop\")\n                    return false;\n                }\n                else\n                {\n                    console.log(\"min score is less than 21 and greater than dealer score\");\n                    return true;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n        //1st point\n        if(min_score > dealerScore)\n        {\n            return true;\n        }\n        //2nd point\n        if(min_score == 21)\n        {\n            return true;\n        }\n        //4th point\n        if(max_score <= dealerScore)\n        {\n            return false;\n        }\n        //3rd point\n        if(dealerScore > min_score)\n        {\n            let randInt = await this.getRandomInt();\n            return randInt <= (max_score-dealerScore);\n        }\n\n        return true;\n    }\n\n\n    getRandomInt = () =>{\n        let min = 1;\n        let max = 10;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n\n    decideTurn = async () => {\n\n        console.log(\"The Turn Goes to : \", this.state.turn)\n        if(this.state.turn === \"\")\n        {\n            console.log(\"No one to start Play\")\n            return;\n        }\n\n        if(this.state.turn ===  -1)\n        {\n            console.log(\"this is dealers turn\")\n            await this.moveCard(-1)\n            console.log(\"then it goes to 0 player\")\n            await this.setState({turn: 0})\n        }\n        else\n        {\n\n            let currentPlayer = this.state.playerList[this.state.turn];\n\n            console.log(\"Player ID : \", currentPlayer)\n\n            if(this.state.noTurnList.has(currentPlayer))\n            {\n                console.log(\"This player is in No Turn  list : \", currentPlayer);\n            }\n\n            else\n            {\n                await this.moveCard(currentPlayer)\n            }\n\n            // if(this.state.noTurnList.size == this.state.playerList)\n            // {\n            //     console.log(\"Final Turn goes to dealer\")\n            //     await this.setState({turn: -1})\n            //     return\n            // }\n        \n            if(this.state.turn+1 >= this.state.playerList.length)\n            {\n                // So first we check if dealer is already dealt 2 cards or more, if not turn goes to \n                if(this.state.dealerCards.length >= 2)\n                {\n                    console.log(\"no Turn List size\",this.state.noTurnList.size,\" then the players size\", this.state.playerList.length)\n                    if(this.state.noTurnList.size === this.state.playerList.length)\n                    {\n                        // we will come here when every one in the players is in the No Turn List, which means they didn't hit or they reached >=21 score\n                        console.log(\"Final Turn goes to dealer\")\n                        // here we will check if dealer wants a turn or not\n                        if(this.shouldDealerTakeCard(this.state.dealerScore) === true)\n                        {\n                            await this.setState({turn: -1})\n                        }\n                        else{\n                            console.log(\"Dealer turn is also over\");\n                            this.setState({gameOver:true});\n                        }\n                        return\n                    }\n                    else\n                    {\n                        console.log(\"Turn goes to 0 index Player\")\n                        await this.setState({turn: 0})\n                    }\n                }\n                else{\n                    console.log(\"Turn goes to dealer\")\n                    await this.setState({turn: -1})\n                }\n            }\n            else\n            {\n                console.log(\"Turn goes to next player\")\n                await this.setState({turn: this.state.turn+1})\n            }\n\n            console.log(this.state.players)\n        }\n\n        return;\n\n    }\n\n    decideWin = async() =>{\n        let winners = [];\n\n        console.log(\"decide Win Invoked\");\n \n        // Going through each each player Score\n\n        let currentPlayersList = [...this.state.playerList]\n        let currentPlayers = {...this.state.players}\n\n        // if dealer score is above 21 then every one else whose score is less than or equal to 21 are winners\n        if(this.state.dealerScore > 21)\n        {\n\n            currentPlayersList.forEach((playersID) =>{\n                        if(currentPlayers[playersID].Score <= 21) \n                        {\n                            winners.push(playersID);\n                        }\n                     })\n        }\n\n        // if dealer score is equal to 21, then in that all the other players that have 21 are the winners\n        else if(this.state.dealerScore == 21)\n        {\n            winners.push(\"DEALER\");\n            currentPlayersList.forEach((playersID) =>{\n                if(currentPlayers[playersID].Score == 21) \n                {\n                    winners.push(playersID);\n                }\n             })\n        }\n\n        // finally if dealerScore is less than 21, in that case all the players that are \n        else\n        {\n            currentPlayersList.forEach((playersID) =>{\n                if(currentPlayers[playersID].Score > this.state.dealerScore && currentPlayers[playersID].Score < 22) \n                {\n                    winners.push(playersID);\n                }\n             })\n             if(winners.length == 0)\n             {\n                 winners.push(\"Dealer\");\n             }\n        }\n\n        console.log(\"Winners : \",winners);\n\n    }\n\n    refreshGame = async() =>{\n        console.log(\"Refreshing Game.....\")\n        \n        // Refreshing Deck and removing all cards from Distributed Cards\n        let Shuffle_PlayingCardsList = []; \n        let suits = ['c', 'd', 'h', 's'];\n        let faces = ['j', 'q', 'k'];\n\n        let addSuits = (i, Shuffle_PlayingCardsList) => {\n            for(let suit of suits){\n                Shuffle_PlayingCardsList.push(i + suit)\n            }\n        }\n        \n        for(let i = 1; i < 10; i++){\n            addSuits(i, Shuffle_PlayingCardsList);\n        }\n        \n        for(let i of faces){\n            addSuits(i, Shuffle_PlayingCardsList);\n        }\n\n        //Refreshing Players Cards, Score and Not Turn List\n        let currentPlayersList = [...this.state.playerList]\n        let currentPlayers = {...this.state.players}\n        \n        currentPlayersList.forEach((playersID) =>{\n            currentPlayers[playersID].Cards = [];\n            currentPlayers[playersID].Score = 0;\n        })\n\n        //Additionally changing GameOverStatus to False and voiding dealer score and cards.\n        await this.setState({\n            players:currentPlayers,\n            noTurnList : new Set([]),\n            gameOver : false,\n            distributedCards : [],  \n            turn : 0,\n            dealerCards : [],\n            dealerScore : 0,\n            // cardStatus : {}\n            maxPlayerScore :0,\n            gameOver:false\n        })\n    }\n\n    _getCardSize = () =>{\n        // console.log(\"window: \", window.innerWidth);\n        // console.log('handsize', this.state.cardList.length)\n        // console.log(\"size: \", window.innerWidth / this.state.cardList.length)\n        let cardSize = window.innerWidth / this.state.cardList.length;\n        return this.state.layout !== \"spread\" || cardSize > 100 ? 100 : cardSize;\n    }\n\n    render() {\n\n        var playerCards = this.state.playerList.map((playersID,index)=>{\n            return <div className=\"player\" key = {playersID}>\n                        <Hand playerType=\"player\" key ={playersID} hide={false} layout={this.state.playerLayout} cards={this.state.players[playersID].Cards} cardSize={this._getCardSize()}/>\n                </div>;\n        })\n\n        if(this.state.gameOver)\n        {\n            this.decideWin();\n        }\n\n        return(\n            <div className=\"main\"> \n                    {/* <div className=\"deck\">\n                        <Hand hide={true} layout={this.state.layout} cards={this.state.cardList} cardSize={this._getCardSize()}/>\n                    </div> */}\n                    <div className=\"dealer\">\n                        <Hand playerType=\"dealer\" hide={false} layout={this.state.dealerLayout} cards={this.state.dealerCards} cardSize={this._getCardSize()}/>\n                    </div>\n\n                    {playerCards}\n                    \n                    <button onClick = {() => this.addPlayer(\"Sai Kishan\")} >Add Player</button>\n                    <button onClick={() => this.decideTurn()} disabled={this.state.gameOver}>Turn</button>\n                    <button onClick={() => this.shuffleCardList()}>Shuffle</button>\n                    <button onClick={() => this.refreshGame()}>Refresh</button>\n            </div>\n        );\n    }\n  }\n\nexport default CheckCss;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from \"./Home\";\nimport CheckCss from './CheckCss'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <CheckCss/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}